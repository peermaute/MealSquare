openapi: "3.0.3"
info:
  title: "MealSquare API"
  description: "MealSquare API"
  version: "1.0.0"
servers:
  - url: "https://api.mealsquare.peermaute.com"
paths:
  /meals:
    post:
      summary: "Creates a new meal in the database."
      operationId: "newMeal"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                ingredients:
                  type: object
                  additionalProperties: 
                     type: object
                     properties:
                      amount:
                        type: string
                      ingredient:
                        type: string
                name:
                  type: string
                carbBase:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                time:
                  type: integer
        required: true
      responses:
        "200":
          description: "OK"
        "401":
          description: "UNAUTHORIZED"
        "400":
          description: "BAD_REQUEST"
  /meals/filters:
    post:
      summary: "POST meals/filters"
      operationId: "getMealsFiltered"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /meals/mealPlan:
    post:
      summary: "POST meals/mealPlan"
      operationId: "getMealPlan"
      parameters:
        - name: "days"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "5"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /meals/{id}:
    get:
      summary: "GET meals/{id}"
      operationId: "getMeal"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      summary: "PUT meals/{id}"
      operationId: "updateMeal"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    delete:
      summary: "DELETE meals/{id}"
      operationId: "deleteMeal"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /meals/{id}/image:
    post:
      summary: "POST meals/{id}/image"
      operationId: "newMealImage"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "file"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "binary"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
# 1) Define the security scheme type (HTTP bearer)
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
# 2) Apply the security globally to all operations
security:
  - bearerAuth: []  